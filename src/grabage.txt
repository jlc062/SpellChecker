Old Hash();
/*int i;
int sum_string = 0;
for (i =0; i < strlen(string); i++){
  sum_string += val_char;
}
return sum_string ;
*/
//printf("%s\n", string);

Old Create();



/*
int sum_collisions = 0;
struct hash_table *wordhash = (struct hash_table*) malloc(sizeof(size_t) * size);
wordhash->size = size;
int i;
int sum_string;
for (i =0; i <size; i++){
  sum_string = hash(strings[i]);
  struct hash_entry this_entry;;
  strcpy(this_entry.string, strings[i]);
  this_entry.value = sum_string;
  printf("%s\n", this_entry.string);
  printf("%d\n", this_entry.value);
  struct hash_entry collision;
  //printf("%d\n", sum_string);
  collision = check_hash_table(sum_string, wordhash);
  if ( collision.value != 0){
    sum_collisions ++;
  }

  wordhash->hash_table[sum_string] = this_entry;
}
printf("Collsions: %d\n", sum_collisions);
return wordhash;
*/

/*

}
/*
char *test_string[10] = { "spike", "tom", "jerry"};
struct hash_table *myhash = hash_create(3, test_string);
struct hash_entry *check_entry = check_hash_table("tom", myhash);
printf("%s\n",check_entry->string );
check_entry = check_hash_table("apples", myhash);
if (check_entry != NULL){
  printf("%s\n",check_entry->string );
}
*/
*/


if (check_hash_table( string, word_table) != 0){
  word_table->table[hash_value]->string[word_table->table[hash_value]->count-1] = string;
  word_table->table[hash_value]->count += 1;
} else{
